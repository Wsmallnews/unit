// resources/js/forms/arrange.js
function arrangeFormField({ state, arrangeToRecursionKey, tableFields }) {
  return {
    state,
    arrangeToRecursionKey,
    tableFields,
    arrangeRealIdToTempId: [],
    arranges: [],
    recursions: [],
    existRandoms: [],
    init: function() {
      this.initArranges();
      this.initRecursions();
      if (!this.arranges) {
        this.autoFirst();
      }
      this.buildRecursionsTable();
      this.updateState();
      this.$watch("arranges", (arranges, oldArranges) => {
        this.buildRecursionsTable();
        this.updateState();
      });
      this.$watch("recursions", (recursions, oldRecursions) => {
        this.updateState();
      });
    },
    initArranges: function() {
      let stateArranges = this.state?.arranges ?? [];
      stateArranges.forEach((stateArrange, index) => {
        let currentArrange = stateArrange;
        if (currentArrange["temp_id"] == void 0 || !currentArrange["temp_id"]) {
          currentArrange["temp_id"] = this.tempRandom();
        } else {
          this.existRandoms.push(currentArrange["temp_id"]);
        }
        let currentChildren = [];
        stateArrange.children.forEach((children, idx) => {
          if (children["temp_id"] == void 0 || !children["temp_id"]) {
            children["temp_id"] = this.tempRandom();
          } else {
            this.existRandoms.push(children["temp_id"]);
          }
          if (children.id != void 0 && children.id) {
            this.arrangeRealIdToTempId[children.id] = children["temp_id"];
          }
          currentChildren.push(children);
        });
        this.arranges.push(currentArrange);
      });
    },
    initRecursions: function() {
      let stateRecursions = this.state?.recursions ?? [];
      stateRecursions.forEach((stateRecursion, index) => {
        let currentRecursion = stateRecursion;
        currentRecursion["temp_id"] = this.tempRandom(1e7, 99999999);
        if (Array.isArray(currentRecursion["arrange_temp_ids"]) && currentRecursion["arrange_temp_ids"].length > 0) {
          if (this.arranges.length == currentRecursion["arrange_temp_ids"].length) {
            this.recursions.push(currentRecursion);
          }
        } else {
          currentRecursion["arrange_temp_ids"] = [];
          let arrangeToRecursionIds = Array.isArray(currentRecursion[this.arrangeToRecursionKey]) ? currentRecursion[this.arrangeToRecursionKey] : currentRecursion[this.arrangeToRecursionKey].split(",");
          arrangeToRecursionIds.forEach((ids) => {
            if (this.arrangeRealIdToTempId[ids]) {
              currentRecursion["arrange_temp_ids"].push(this.arrangeRealIdToTempId[ids]);
            }
          });
          if (arrangeToRecursionIds.length == currentRecursion["arrange_temp_ids"].length) {
            this.recursions.push(currentRecursion);
          }
        }
      });
    },
    updateState: function() {
      let state2 = {};
      state2["arranges"] = this.arranges;
      state2["recursions"] = this.recursions;
      this.state = state2;
    },
    arrangeTemplate: function() {
      return {
        temp_id: this.tempRandom(),
        name: "",
        order_column: this.arranges.length,
        children: []
      };
    },
    childrenArrangeTemplate: function(index) {
      return {
        temp_id: this.tempRandom(),
        name: "",
        image: "",
        order_column: this.arranges[index].children.length
      };
    },
    // 自动初始化 arranges
    autoFirst: function() {
      this.arranges = [this.arrangeTemplate()];
      this.arranges[0].children.push(this.childrenArrangeTemplate(0));
    },
    // 添加主规格
    addArrange: function() {
      this.arranges.push(this.arrangeTemplate());
    },
    // 添加子规格
    addChildrenArrange: function(index) {
      this.arranges[index].children.push(this.childrenArrangeTemplate(index));
      if (this.arranges[index].children.length == 1) {
        this.recursions = [];
      }
    },
    deleteArrange: function(index) {
      if (this.arranges[index].children.length) {
        this.recursions = [];
      }
      this.arranges.splice(index, 1);
    },
    // 删除子规格
    deleteChildrenArrange: function(parentIndex, index) {
      let data = this.arranges[parentIndex].children[index];
      this.arranges[parentIndex].children.splice(index, 1);
      if (this.arranges[parentIndex].children.length <= 0) {
        this.recursions = [];
      } else {
        let deleteRecursionIndexArr = [];
        this.recursions.forEach((recursion, index2) => {
          recursion.arrange_texts.forEach((arrange_text, ix) => {
            if (arrange_text == data.name) {
              deleteRecursionIndexArr.push(index2);
            }
          });
        });
        deleteRecursionIndexArr.sort(function(a, b) {
          return b - a;
        });
        deleteRecursionIndexArr.forEach((recursionIndex, index2) => {
          this.recursions.splice(recursionIndex, 1);
        });
      }
    },
    // 重新构建 recursions 表格
    buildRecursionsTable: function() {
      let arrangeChildrenIdArr = [];
      this.arranges.forEach((arrange, key) => {
        let children = arrange.children;
        let childrenIdArr = [];
        if (children.length > 0) {
          children.forEach((child, k) => {
            childrenIdArr.push(child.temp_id);
          });
          arrangeChildrenIdArr.push(childrenIdArr);
        }
      });
      this.recursionFunc(arrangeChildrenIdArr);
    },
    // 递归
    recursionFunc: function(arrangeChildrenIdArr, arrangeK = 0, temp = []) {
      if (arrangeK == arrangeChildrenIdArr.length && arrangeK != 0) {
        let tempDetail = [];
        let tempDetailIds = [];
        temp.forEach((item, index) => {
          this.arranges.forEach((arrange, inx) => {
            arrange.children.forEach((child, ix) => {
              if (item == child.temp_id) {
                tempDetail.push(child.name);
                tempDetailIds.push(child.temp_id);
              }
            });
          });
        });
        let flag = false;
        for (let i in this.recursions) {
          this.recursions[i].arrange_temp_ids.sort();
          tempDetailIds.sort();
          if (this.recursions[i].arrange_temp_ids.join(",") == tempDetailIds.join(",")) {
            flag = i;
            break;
          }
        }
        if (!flag) {
          let pushRecursion = {
            temp_id: this.tempRandom(1e7, 99999999),
            arrange_texts: tempDetail,
            arrange_temp_ids: tempDetailIds
          };
          this.tableFields.forEach((field) => {
            pushRecursion[field.field] = field.default;
          });
          pushRecursion[this.arrangeToRecursionKey] = [];
          this.recursions.push(pushRecursion);
        } else {
          this.recursions[flag].arrange_texts = tempDetail;
          this.recursions[flag].arrange_temp_ids = tempDetailIds;
        }
      }
      if (arrangeChildrenIdArr.length) {
        arrangeChildrenIdArr[arrangeK] && arrangeChildrenIdArr[arrangeK].forEach((cv, ck) => {
          temp[arrangeK] = arrangeChildrenIdArr[arrangeK][ck];
          this.recursionFunc(arrangeChildrenIdArr, arrangeK + 1, temp);
        });
      }
    },
    tempRandom: function(min = 1e6, max = 9999999) {
      let random;
      do {
        random = Math.floor(Math.random() * (max - min + 1)) + min;
      } while (this.existRandoms.includes(random));
      this.existRandoms.push(random);
      return random;
    }
  };
}
export {
  arrangeFormField as default
};
//# sourceMappingURL=data:application/json;base64,
